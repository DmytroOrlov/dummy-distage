package conf

import capture.Capture
import capture.Capture.Constructors
import pureconfig.error.ConfigReaderFailures

trait AppError[+A] {
  def configErr(e: ConfigReaderFailures): A

  def serverBuilderErr(e: Throwable): A
}

//this probably should be generated by some macro
object AppError extends Constructors[AppError] {
  type C = Capture[AppError]

  def configErr(e: ConfigReaderFailures) =
    Capture[AppError](_.configErr(e))

  def serverBuilderErr(e: Throwable) =
    Capture[AppError](_.serverBuilderErr(e))

  trait `AppError[String]` extends AppError[String] {
    def configErr(e: ConfigReaderFailures) = s"configErr $e"

    def serverBuilderErr(e: Throwable) = s"serverBuilderErr $e"
  }

  object `AppError[String]` extends `AppError[String]`

}
